arrange(desc(condition))
# Missing nbs, condition variables
# are there correlations with other variables e.g. seismic_il
# e.g. 48 IL4 has indeterminate nbs
# Identify this as a data problem
table(is.na(hosp$nbs), hosp$seismic_il)
# There is also a lot of building without condition data including 48 IL4... Coincidence?
table(is.na(hosp$condition_grade), hosp$seismic_il)
# Maybe I should use a graded_nbs
# WHY are there 2 NA values for graded_nbs clean and make consistent
# Yes definitley use
ggplot(data = hosp, aes(x = graded_nbs, y = nbs)) + geom_point() + geom_hline(yintercept = 0.34)
# Also 48 IL4s that do not have a graded NBS value
table(is.na(hosp$graded_nbs), hosp$seismic_il)
# Building service by seismic importance
table(hosp$highest_building_service, hosp$seismic_il)
# Look individually at the 48 IL4 buildings with missing condition and nbs data.
# Ok so the missing nbs observations are not the same as the missing condition observations
hosp %>% filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%  arrange(desc(seismic_zone), nbs, desc(condition)) %>% View()
table(hosp$condition_grade, hosp$seismic_il)
# Maybe have pre-filtering based on highest_building_service and see if it correlates to some other variable like importance
# Not really
table(hosp$seismic_il, hosp$highest_building_service)
# I can potentially include a summary of the data gaps code line here
hosp %>% filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%  arrange(desc(seismic_zone), nbs, desc(condition))
hosp %>% filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%  arrange(desc(seismic_zone), nbs, desc(condition)) %>% print()
# I can potentially include a summary of the data gaps code line here
hosp %>% filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%  arrange(desc(seismic_zone), nbs, desc(condition)) %>% select(pareto_band, region, dhb_name, campus_name, building_name, seismic_il, seismic_zone, graded_nbs, condition_grade, gfa) %>%print(n = 10)
# I can potentially include a summary of the data gaps code line here
hosp %>% filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%  arrange(desc(seismic_zone), nbs, desc(condition)) %>% select(region, dhb_name, campus_name, building_name, seismic_il, seismic_zone, graded_nbs, condition_grade, gfa) %>%print(n = 10)
library(huxtable)
important_vars <- c("condition", "gfa", "nbs", "seismic_il", "seismic_zone")
nice_names <- c("Condition", "Gross Floor Area", "% NBS", "Seismic Importance Level", "Seismic Zone")
na_counts <- sapply(hosp[important_vars], function(x) sum(is.na(x)))
tmp <- tibble(
Variable      = nice_names,
`Missing (n)` = as.integer(na_counts)
)
ht <- hux(tmp)
ht
ht <- hux(t(tmp))
ht
tmp <- tibble(
Variable      = nice_names,
`Missing (n)` = as.integer(na_counts)
) %>%
pivot_wider(names_from = Variable, values_from = c(`Missing (n)`, `Missing (%)`)) %>%
t() %>%
as.data.frame()
tmp <- tibble(
Variable      = nice_names,
`Missing (n)` = as.integer(na_counts)
) %>%
pivot_wider(names_from = Variable, values_from = c(`Missing (n)`)) %>%
t() %>%
as.data.frame()
ht
tmp
ht <- hux(tmp)
ht
tmp <- tibble(
Variable      = nice_names,
`Missing (n)` = as.integer(na_counts)
) %>%
pivot_wider(names_from = Variable, values_from = c(`Missing (n)`)) %>%
as.data.frame()
tmp
ht <- hux(tmp)
ht
tmp
rownames(tmp) <- c('Variable', 'Missing (n)')
rownames(tmp) <- c('Missing (n)')
ht <- hux(tmp)
ht
# Inputs
vars       <- c("condition", "gfa", "nbs", "seismic_il", "seismic_zone")
nice_names <- c("Condition", "Gross Floor Area", "% NBS", "Seismic Importance Level", "Seismic Zone")
# Named vectors: counts & percents
na_n <- setNames(sapply(hosp[vars], \(x) sum(is.na(x))), nice_names)
na_p <- setNames(na_n / nrow(hosp) * 100,                 nice_names)
# Wide data frame with rownames = nice labels
df <- data.frame(
`Missing (n)` = as.integer(na_n),
`Missing (%)` = na_p,
check.names   = FALSE,
row.names     = names(na_n)
)
# Huxtable with your dissertation styling
ht <- hux(df) %>%
add_rownames("Variable") %>%
set_escape_contents(everywhere, 1, FALSE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_tb_padding(everywhere, everywhere, 8)
ht
# Huxtable with your dissertation styling
ht <- hux(df) %>%
add_rownames("Variable") %>%
set_escape_contents(everywhere, 1, FALSE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_tb_padding(everywhere, everywhere, 8)
top_border(ht)[1, ]              <- brdr(1, style = "double")
bottom_border(ht)[c(1, nrow(ht)),] <- 1
bold(ht)[1, ]                    <- TRUE
valign(ht)                       <- "middle"
position(ht)                     <- "center"
align(ht)                        <- "center"
width(ht)                        <- 0.6
col_width(ht)                    <- c(0.6, 0.2, 0.2)
# Format percent column (one decimal place)
set_number_format(ht, everywhere, "Missing (%)",
function(x) sprintf("%.1f\\%%", x)) -> ht
# In LaTeX/PDF output:
print_latex(ht, tabular_only = TRUE)
ht
# Inputs
vars       <- c("condition", "gfa", "nbs", "seismic_il", "seismic_zone")
nice_names <- c("Condition", "Gross Floor Area", "% NBS", "Seismic Importance Level", "Seismic Zone")
# Named vectors: counts & percents
na_n <- setNames(sapply(hosp[vars], \(x) sum(is.na(x))), nice_names)
na_p <- setNames(na_n / nrow(hosp) * 100,                 nice_names)
# Create wide matrix: 2 rows (n, %) × variables as columns
df_wide <- rbind(
"Missing (n)" = as.integer(na_n),
"Missing (%)" = sprintf("%.1f", na_p)  # keep as char so we can append % below
)
# Add % symbol to the second row
df_wide[2, ] <- paste0(df_wide[2, ], "\\%")
# Convert to huxtable
ht <- hux(as.data.frame(df_wide), add_colnames = TRUE) %>%
add_rownames("Measure") %>%
set_escape_contents(everywhere, everywhere, FALSE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_tb_padding(everywhere, everywhere, 8)
# Styling
top_border(ht)[1, ]              <- brdr(1, style = "double")
bottom_border(ht)[c(1, nrow(ht)),] <- 1
bold(ht)[1, ]                    <- TRUE
valign(ht)                       <- "middle"
position(ht)                     <- "center"
align(ht)                        <- "center"
width(ht)                        <- 0.9   # a bit wider for wide format
col_width(ht)                    <- c(0.25, rep(0.15, length(nice_names)))
# In LaTeX/PDF output:
print_latex(ht, tabular_only = TRUE)
ht
# Convert to huxtable
ht <- hux(as.data.frame(df_wide), add_colnames = TRUE) %>%
add_rownames("Measure") %>%
add_colnames(nice_names) %>%
set_escape_contents(everywhere, everywhere, FALSE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_tb_padding(everywhere, everywhere, 8)
ht
# Inputs
vars       <- c("condition", "gfa", "nbs", "seismic_il", "seismic_zone")
nice_names <- c("Condition", "Gross Floor Area", "% NBS", "Seismic Importance Level", "Seismic Zone")
# Named vectors: counts & percents
na_n <- setNames(sapply(hosp[vars], \(x) sum(is.na(x))), nice_names)
na_p <- setNames(na_n / nrow(hosp) * 100,                 nice_names)
na_n
na_p
# Create wide matrix: 2 rows (n, %) × variables as columns
df_wide <- rbind(
"Missing (n)" = as.integer(na_n),
"Missing (%)" = sprintf("%.1f", na_p)  # keep as char so we can append % below
)
df_wide
colnames(df_wide)
names(df_wide)
df_wide
names(df_wide) <- nice_names
df_wide
# Create wide matrix: 2 rows (n, %) × variables as columns
df_wide <- rbind(
"Variable".   = nice_names,
# Create wide matrix: 2 rows (n, %) × variables as columns
df_wide <- rbind(
"Variable"   = nice_names,
"Missing (n)" = as.integer(na_n),
"Missing (%)" = sprintf("%.1f", na_p)  # keep as char so we can append % below
)
# Add % symbol to the second row
df_wide[3, ] <- paste0(df_wide[3, ], "\\%")
# Convert to huxtable
ht <- hux(as.data.frame(df_wide), add_colnames = FALSE) %>%
add_rownames("Measure") %>%
set_escape_contents(everywhere, everywhere, FALSE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_tb_padding(everywhere, everywhere, 8)
ht
# Styling
top_border(ht)[1, ]              <- brdr(1, style = "double")
bottom_border(ht)[c(1, nrow(ht)),] <- 1
bold(ht)[1, ]                    <- TRUE
valign(ht)                       <- "middle"
position(ht)                     <- "center"
align(ht)                        <- "center"
width(ht)                        <- 0.9   # a bit wider for wide format
col_width(ht)                    <- c(0.25, rep(0.15, length(nice_names)))
# In LaTeX/PDF output:
print_latex(ht, tabular_only = TRUE)
ht
ht
tmp <- hosp %>%
filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%
arrange(desc(seismic_zone), nbs, desc(condition)) %>%
select(#region,
#dhb_name,
campus_name,
building_name,
seismic_il,
seismic_zone,
graded_nbs,
condition_grade,
gfa) %>% .[c(1,13,22),]
# Convert to huxtable
ht <- hux(tmp, add_colnames = FALSE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
# Convert to huxtable
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
tmp <- hosp %>%
filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%
arrange(desc(seismic_zone), nbs, desc(condition)) %>%
select(#region,
#dhb_name,
campus_name,
building_name,
seismic_il,
seismic_zone,
graded_nbs,
condition_grade,
gfa) %>% .[c(1,3,13,15,22,23,25),]
# Convert to huxtable
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
# Styling
top_border(ht)[1, ]              <- brdr(1, style = "double")
bottom_border(ht)[c(1, nrow(ht)),] <- 1
bold(ht)[1, ]                    <- TRUE
valign(ht)                       <- "middle"
position(ht)                     <- "center"
align(ht)                        <- "center"
width(ht)                        <- 1   # a bit wider for wide format
col_width(ht)                    <- c(rep(1/6, length(nice_names)+1))
caption(ht) <- "Table 2: Examples of high risk/high importance assets with missing condition and NBS assessments."
caption_pos(ht) <- "bottom"   # or "bottom"
ht
col_width(ht)                    <- c(rep(1/7, length(nice_names)+1))
caption(ht) <- "Table 2: Examples of high risk/high importance assets with missing condition and NBS assessments."
caption_pos(ht) <- "bottom"   # or "bottom"
ht
# Convert to huxtable
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_number_format(everywhere, 'gfa', fmt_pretty(digits = 3)) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
# Styling
top_border(ht)[1, ]              <- brdr(1, style = "double")
bottom_border(ht)[c(1, nrow(ht)),] <- 1
bold(ht)[1, ]                    <- TRUE
valign(ht)                       <- "middle"
position(ht)                     <- "center"
align(ht)                        <- "center"
width(ht)                        <- 1   # a bit wider for wide format
caption(ht) <- "Table 2: Examples of high risk/high importance assets with missing condition and NBS assessments."
caption_pos(ht) <- "bottom"   # or "bottom"
ht
out %>% summarise(by = pareto_band, n = count())
out %>%
group_by(pareto_band) %>%
summarise(n = n(), .groups = "drop")
tmp <- hosp %>%
filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%
mutate(seismic_zone = str_replace(seismic_zone, ' Zone', '')) %>%
arrange(desc(seismic_zone), nbs, desc(condition)) %>%
select(#region,
#dhb_name,
campus_name,
building_name,
seismic_il,
seismic_zone,
graded_nbs,
condition_grade,
gfa) %>% .[c(1,3,13,15,22,23,25),]
tmp
tmp <- hosp %>%
filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%
arrange(desc(seismic_zone), nbs, desc(condition)) %>%
mutate(seismic_zone = str_replace(seismic_zone, ' Zone', '')) %>%
select(#region,
#dhb_name,
campus_name,
building_name,
seismic_il,
seismic_zone,
graded_nbs,
condition_grade,
gfa) %>% .[c(1,3,13,15,22,23,25),]
names(tmp) <- c("Campus name", "Building name", "IL", "Risk", "NBS", "Cond")
# Convert to huxtable
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_number_format(everywhere, 'gfa', fmt_pretty(digits = 3)) %>%
set_lr_padding(everywhere, everywhere, 0) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
tmp <- hosp %>%
filter(seismic_il == "IL4" & (is.na(condition) | is.na(nbs))) %>%
arrange(desc(seismic_zone), nbs, desc(condition)) %>%
mutate(seismic_zone = str_replace(seismic_zone, ' Zone', '')) %>%
select(#region,
#dhb_name,
campus_name,
building_name,
seismic_il,
seismic_zone,
graded_nbs,
condition_grade,
gfa) %>% .[c(1,3,13,15,22,23,25),]
names(tmp) <- c("Campus name", "Building name", "IL", "Risk", "NBS", "Cond", "GFA")
# Convert to huxtable
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_number_format(everywhere, 'gfa', fmt_pretty(digits = 3)) %>%
set_lr_padding(everywhere, everywhere, 0) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
tmp
# Convert to huxtable
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_number_format(everywhere, 'GFA', fmt_pretty(digits = 3)) %>%
set_lr_padding(everywhere, everywhere, 0) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
tmp <- out %>%
group_by(pareto_band) %>%
summarise(n = n(), .groups = "drop")
tmp
t(tmp)
tmp <- out %>%
group_by(pareto_band) %>%
summarise(n = n(), .groups = "drop")
tmp <- t(tmp)
# Convert to huxtable
ht <- hux(as.data.frame(tmp), add_colnames = FALSE, add_rownames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 2) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
# Crosstab of condition grade and seismic IL
tmp <- table(hosp$condition_grade, hosp$seismic_il)
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 0) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
# Crosstab of condition grade and seismic IL
tmp <- table(hosp$condition_grade, hosp$seismic_il)
tmp
ht <- hux(tmp, add_colnames = FALSE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 0) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
# Crosstab of condition grade and seismic IL
tmp <- as.data.frame.matrix(table(hosp$condition_grade, hosp$seismic_il)
tmp
# Crosstab of condition grade and seismic IL
tmp <- as.data.frame.matrix(table(hosp$condition_grade, hosp$seismic_il))
tmp
# 2. Convert to data.frame and keep rownames for the leftmost column
tmp <- tibble::rownames_to_column(tmp, "Condition Grade")
tmp
ht <- hux(tmp, add_colnames = FALSE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 0) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
ht <- hux(tmp, add_colnames = TRUE) %>%
set_escape_contents(everywhere, everywhere, TRUE) %>%
set_lr_padding(everywhere, everywhere, 0) %>%
set_top_padding(everywhere, everywhere, 1) %>%
set_bottom_padding(everywhere, everywhere, 4)
ht
hosp %>%
filter(seismic_il %in% c("IL3", "IL4")) %>%
ggplot(aes(x = condition, y = nbs, color = seismic_zone)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0.34, linetype = "dashed", color = "red") +
facet_wrap(~ seismic_il, nrow = 1) +
scale_color_viridis_d(name = "Seismic zone") +
labs(
title = "High-importance buildings: Condition vs Seismic Strength",
x = "Condition (higher = worse)",
y = "% NBS"
) +
theme_minimal(base_size = 11) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", hjust = 0),
strip.text = element_text(face = "bold")
)
hosp %>%
filter(seismic_il %in% c("IL3", "IL4")) %>%
ggplot(aes(x = condition, y = nbs, color = seismic_zone)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0.34, linetype = "dashed", color = "red") +
facet_wrap(~ seismic_il, nrow = 1) +
scale_color_viridis_d(name = "Seismic zone") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(
title = "High-importance buildings: Condition vs Seismic Strength",
x = "Condition (higher = worse)",
y = "% NBS"
) +
theme_minimal(base_size = 11) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", hjust = 0),
strip.text = element_text(face = "bold")
)
hosp %>%
filter(seismic_il %in% c("IL3", "IL4")) %>%
ggplot(aes(x = condition, y = nbs, color = seismic_zone)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0.34, linetype = "dashed", color = "red") +
facet_wrap(~ seismic_il, nrow = 1) +
scale_color_viridis_d(name = "Seismic zone") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(
title = "High-importance buildings: Condition vs Seismic Strength",
x = "Condition (higher = worse)",
y = "% NBS"
) +
theme_minimal(base_size = 11) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", hjust = 0),
strip.text = element_text(face = "bold")
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.6) # outer border
hosp %>%
filter(seismic_il %in% c("IL3", "IL4")) %>%
ggplot(aes(x = condition, y = nbs, color = seismic_zone)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0.34, linetype = "dashed", color = "red") +
facet_wrap(~ seismic_il, nrow = 1) +
scale_color_viridis_d(name = "Seismic zone") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(
title = "High-importance buildings: Condition vs Seismic Strength",
x = "Condition (higher = worse)",
y = "% NBS"
) +
theme_minimal(base_size = 11) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", hjust = 0),
strip.text = element_text(face = "bold"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.6) # outer border
)
hosp %>%
filter(seismic_il %in% c("IL3", "IL4")
!is.na(seismic_zone),
hosp %>%
filter(seismic_il %in% c("IL3", "IL4"),
!is.na(seismic_zone),
!is.na(condition),
!is.na(nbs)) %>%
ggplot(aes(x = condition, y = nbs, color = seismic_zone)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0.34, linetype = "dashed", color = "red") +
facet_wrap(~ seismic_il, nrow = 1) +
scale_color_viridis_d(name = "Seismic zone") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(
title = "High-importance buildings: Condition vs Seismic Strength",
x = "Condition (higher = worse)",
y = "% NBS"
) +
theme_minimal(base_size = 11) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", hjust = 0),
strip.text = element_text(face = "bold"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.6) # outer border
)
47+16+1
